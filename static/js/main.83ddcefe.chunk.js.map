{"version":3,"sources":["storage/local-storage.js","App.js","serviceWorker.js","index.js"],"names":["STORAGE_KEY","getWords","a","wordsString","localStorage","getItem","words","JSON","parse","setWords","setItem","stringify","addNewWord","newWord","push","word","score","incrementScore","wordToUpdate","inc","find","w","App","state","onNewWordInputChange","bind","onWordAddButtonClick","readWordsFromDatabase","updateScore","this","links","map","className","key","href","searchLink","encode","Button","icon","use","onClick","googleLink","Input","size","onValueChange","value","sort","b","setState","console","log","React","Component","str","encodeURI","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.83ddcefe.chunk.js","sourcesContent":["\nconst STORAGE_KEY = 'words';\n\nexport async function getWords() {\n    const wordsString = localStorage.getItem(STORAGE_KEY);\n    if (wordsString) {\n        const words = JSON.parse(wordsString);\n        return words;\n    }\n    return [];\n}\n\nfunction setWords(words) {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(words));\n}\n\nexport async function addNewWord(newWord) {\n    const words = await getWords();\n    words.push({\n        word: newWord,\n        score: 0\n    });\n    setWords(words);\n}\n\nexport async function incrementScore(wordToUpdate, inc) {\n    const words = await getWords();\n    const wordElementToUpdate = words.find(w => w.word == wordToUpdate.word);\n    wordElementToUpdate.score += inc;\n    setWords(words);\n}\n","import React from 'react';\nimport styles from './App.css';\nimport SearchIcon from '@skbkontur/react-icons/Search'\nimport AddIcon from '@skbkontur/react-icons/Add'\nimport RemoveIcon from '@skbkontur/react-icons/Remove'\nimport { Button, Input } from '@skbkontur/react-ui';\n//import { getWords, addNewWord, incrementScore } from './storage/dynamo';\n//import { getWords, addNewWord, incrementScore } from './storage/test-storage';\nimport { getWords, addNewWord, incrementScore } from './storage/local-storage';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      newWord: '',\n      words: []\n    };\n    this.onNewWordInputChange = this.onNewWordInputChange.bind(this);\n    this.onWordAddButtonClick = this.onWordAddButtonClick.bind(this);\n    this.readWordsFromDatabase = this.readWordsFromDatabase.bind(this);\n    this.updateScore = this.updateScore.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.readWordsFromDatabase();\n  }\n\n  render() {\n    const links = this.state.words.map(w => (\n      <div className='wordDiv' key={w.word}>\n        <a className='searchLink' href={`${searchLink}${encode(w.word)}`}>{w.word}</a>\n        <span className='score'>{w.score}</span>\n        <span className='plusMinusButtons'>\n          <span className='button' >\n            <Button icon={<AddIcon />} use='link' onClick={() => this.updateScore(w, 1)} />\n          </span>\n          <span className='button' >\n            <Button icon={<RemoveIcon />} use='link' onClick={() => this.updateScore(w, -1)} />\n          </span>\n        </span>\n        <a className='exampleLink' href={`${googleLink}\"${encode(w.word)}\"`}>\n          <SearchIcon />\n        </a>\n      </div>\n    ));\n\n    return (\n      <div>\n        <div className='inputBlock'>\n          <div>\n            <span>\n              <Input className='input' size='medium' onValueChange={this.onNewWordInputChange} value={this.state.newWord} />\n            </span>\n            <span className='addButton'>\n              <Button icon={<AddIcon />} use='default' onClick={this.onWordAddButtonClick}>add word</Button>\n            </span>\n          </div>\n          <div className='inputLink'>\n            <a href={`${searchLink}${encode(this.state.newWord)}`}>{this.state.newWord}</a>\n          </div>\n        </div>\n        <div className='wordsList'>\n          {links}\n        </div>\n      </div>\n    );\n  }\n\n  async updateScore(word, inc) {\n    await incrementScore(word, inc);\n    await this.readWordsFromDatabase();\n  }\n\n  async readWordsFromDatabase() {\n    const words = await getWords();\n    words.sort((a, b) => a.score - b.score);\n    this.setState({ words });\n  }\n\n  onNewWordInputChange(value) {\n    this.setState({ newWord: value })\n  }\n\n  async onWordAddButtonClick() {\n    const newWord = this.state.newWord;\n    console.log('Adding new word: ' + newWord);\n    await addNewWord(newWord);\n    this.setState({ newWord: '' })\n    await this.readWordsFromDatabase();\n  }\n}\n\n\nconst encode = (str) => {\n  return encodeURI(str);\n}\n\nconst searchLink = 'https://www.macmillandictionary.com/search/british/direct/?q='\nconst googleLink = 'https://www.google.com/search?tbm=nws&q='\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}